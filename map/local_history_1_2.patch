Index: map.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/map.hpp b/map.hpp
--- a/map.hpp	
+++ b/map.hpp	
@@ -23,60 +23,131 @@
 
         static Compare cmp;
 
-        friend bool operator<(const Key &u, const Key &v) {
-            return cmp(u, v);
+        bool friend operator<(const Key &x, const Key &y) {
+            return cmp(x, y);
+        }
+
+        bool friend operator>(const Key &x, const Key &y) {
+            return cmp(y, x);
+        }
+
+        bool friend operator==(const Key &x, const Key &y) {
+            return !cmp(x, y) && !cmp(y, x);
         }
 
-        friend bool operator>(const Key &u, const Key &v) {
-            return cmp(v, u);
+        bool friend operator!=(const Key &x, const Key &y) {
+            return cmp(x, y) || cmp(y, x);
         }
 
-        friend bool operator==(const Key &u, const Key &v) {
-            return (!cmp(u, v)) && (!cmp(v, u));
+        bool friend operator<=(const Key &x, const Key &y) {
+            return !cmp(y, x);
         }
 
-        friend bool operator!=(const Key &u, const Key &v) {
-            return cmp(u, v) || cmp(v, u);
+        bool friend operator>=(const Key &x, const Key &y) {
+            return !cmp(x, y);
         }
 
         class node {
         public:
             bool col;// 0-red 1-black
             value_type data;
-            node *lc, *rc, *fa;
+            node *ch[2], *fa;
 
             // key may not have default constructor !!!
-            // so node do not have constructor too !!!
-            // only copy constructor !!!
-            node(const node &other) : col(other.col), data(other.data), lc(other.lc), rc(other.rc), fa(other.fa) {}
-        } *root;
+            // so node needs a copy constructor
+            node(const value_type &_data) : data(_data) {}
+
+            node(const node &other) : col(other.col), data(other.data) {
+                ch[0] = other.ch[0], ch[1] = other.ch[1], fa = other.fa;
+            }
+        } *nil, *root;
 
         size_t _size;
 
         void dfs_copy(node *&o1, node *o2, node *fa) {
-            if (o2 == nullptr)return;
+            if (o2 == nil)return;
             o1 = new node(*o2), o1->fa = fa;
-            dfs_copy(o1->lc, o2->lc, o1);
-            dfs_copy(o1->rc, o2->rc, o1);
+            dfs_copy(o1->ch[0], o2->ch[0], o1);
+            dfs_copy(o1->ch[1], o2->ch[1], o1);
         }
 
         void dfs_destroy(node *o1) {
-            if (o1 == nullptr)return;
-            dfs_destroy(o1->lc);
-            dfs_destroy(o1->rc);
+            if (o1 == nil)return;
+            dfs_destroy(o1->ch[0]);
+            dfs_destroy(o1->ch[1]);
             delete o1;
-            o1 = nullptr;
+            o1 = nil;
         }
 
         node *my_find(const Key &key) {
             node *o = root;
-            while (o != nullptr && o->data.first != key) {
-                if (key < o->data.first)o = o->lc;
-                else o = o->rc;
+            while (o != nil && o->data.first != key) {
+                if (key < o->data.first)o = o->ch[0];
+                else o = o->ch[1];
             }
+            return o;
+        }
+
+        inline bool rel(node *o) {
+            return o->fa->ch[1] == o;
+        }
+
+        inline node *U(node *o) {
+            if (o == root || o->fa == root)return nil;
+            return o->fa->fa->ch[rel(o->fa) ^ 1];
+        }
+
+        inline node *B(node *o) {
+            if (o == root)return nil;
+            return o->fa->ch[rel(o) ^ 1];
+        }
+
+        void rotate(node *o) {// promise that o is not root
+            bool r = rel(o);
+            node *f = o->fa;
+
+            o->fa = f->fa;
+            /*ATTENTION*/
+            if (f->fa != nil)f->fa->ch[rel(f)] = o;
+            else root = o;
+
+            /*ATTENTION*/
+            if (o->ch[r ^ 1] != nil)o->ch[r ^ 1]->fa = f;
+            f->ch[r] = o->ch[r ^ 1];
+
+            f->fa = o, o->ch[r ^ 1] = f;
+
+        }
+
+        node *Pre(const Key &key) {
+            node *o = root, *res = nil;
+            while (o != nil) {
+                if (o->data.first >= key)o = o->ch[0];
+                else res = o, o = o->ch[1];
+            }
+            return res;
+        }
+
+        node *Sub(const Key &key) {
+            node *o = root, *res = nil;
+            while (o != nil) {
+                if (o->data.first <= key)o = o->ch[1];
+                else res = o, o = o->ch[0];
+            }
+            return res;
+        }
+
+        node *Min(node *o) {
+            while (o->ch[0] != nil)o = o->ch[0];
             return o;
         }
 
+        node *Max(node *o) {
+            while (o->ch[1] != nil)o = o->ch[1];
+            return o;
+        }
+
+
     public:
 
         /**
@@ -94,6 +165,11 @@
              * TODO add data members
              *   just add whatever you want.
              */
+
+            map<Key, T> *id;
+            node *ptr;
+            // when ptr == nil , the iterator must be pointed to the end()
+
         public:
             // The following code is written for the C++ type_traits library.
             // Type traits is a C++ feature for describing certain properties of a type.
@@ -106,9 +182,9 @@
             // About value_type: https://blog.csdn.net/u014299153/article/details/72419713
             // About iterator_category: https://en.cppreference.com/w/cpp/iterator
             using difference_type = std::ptrdiff_t;
-            using value_type = T;
-            using pointer = T *;
-            using reference = T &;
+            using value_type = map::value_type;
+            using pointer = value_type*;
+            using reference = value_type&;
             using iterator_category = std::output_iterator_tag;
             // If you are interested in type_traits, toy_traits_test provides a place to
             // practice. But the method used in that test is old and rarely used, so you
@@ -117,55 +193,89 @@
             // this part is only for bonus.
 
 
-            iterator() {
+            iterator(map<Key, T> *_id = nullptr, node *_ptr = nullptr) : id(_id), ptr(_ptr) {
                 // TODO
             }
 
-            iterator(const iterator &other) {
+            iterator(const iterator &other) : id(other.id), ptr(other.ptr) {
                 // TODO
             }
 
             /**
              * TODO iter++
              */
-            iterator operator++(int) {}
+            iterator operator++(int) {
+                iterator ret = *this;
+                if (ptr == id->nil)throw invalid_iterator();
+                ptr = id->Sub(ptr->data.first);
+                return ret;
+            }
 
             /**
              * TODO ++iter
              */
-            iterator &operator++() {}
+            iterator &operator++() {
+                if (ptr == id->nil)throw invalid_iterator();
+                ptr = id->Sub(ptr->data.first);
+                return *this;
+            }
 
             /**
              * TODO iter--
              */
-            iterator operator--(int) {}
+            iterator operator--(int) {
+                iterator ret = *this;
+                if (ptr == id->nil)ptr = id->Max(id->root);
+                else ptr = id->Pre(ptr->data.first);
+                if (ptr == id->nil)throw invalid_iterator();
+                return ret;
+            }
 
             /**
              * TODO --iter
              */
-            iterator &operator--() {}
+            iterator &operator--() {
+                if (ptr == id->nil)ptr = id->Max(id->root);
+                else ptr = id->Pre(ptr->data.first);
+                if (ptr == id->nil)throw invalid_iterator();
+                return *this;
+            }
 
             /**
              * a operator to check whether two iterators are same (pointing to the same memory).
              */
-            value_type &operator*() const {}
+            value_type &operator*() const {
+                if (ptr == id->nil)throw invalid_iterator();
+                return ptr->data;
+            }
 
-            bool operator==(const iterator &rhs) const {}
+            bool operator==(const iterator &rhs) const {
+                return ptr == rhs.ptr;
+            }
 
-            bool operator==(const const_iterator &rhs) const {}
+            bool operator==(const const_iterator &rhs) const {
+                return ptr == rhs.ptr;
+            }
 
             /**
              * some other operator for iterator.
              */
-            bool operator!=(const iterator &rhs) const {}
+            bool operator!=(const iterator &rhs) const {
+                return ptr != rhs.ptr;
+            }
 
-            bool operator!=(const const_iterator &rhs) const {}
+            bool operator!=(const const_iterator &rhs) const {
+                return ptr != rhs.ptr;
+            }
 
             /**
              * for the support of it->first.
              * See <http://kelvinh.github.io/blog/2013/11/20/overloading-of-member-access-operator-dash-greater-than-symbol-in-cpp/> for help.
              */
-            value_type *operator->() const noexcept {}
+            value_type *operator->() const noexcept {
+                if (ptr == id->nil)throw invalid_iterator();
+                return &(ptr->data);
+            }
         };
 
         class const_iterator {
@@ -173,30 +283,117 @@
             //  and it should be able to construct from an iterator.
         private:
             // data members.
+            map<Key, T> *id;
+            node *ptr;
         public:
-            const_iterator() {
+            const_iterator(map<Key, T> *_id = nullptr, node *_ptr = nullptr) : id(_id), ptr(_ptr) {
+            }
+
+            const_iterator(
+                    const const_iterator &other) : id(other.id), ptr(other.ptr) {
                 // TODO
             }
 
-            const_iterator(const const_iterator &other) {
-                // TODO
-            }
-
-            const_iterator(const iterator &other) {
+            const_iterator(
+                    const iterator &other) : id(other.id), ptr(other.ptr) {
                 // TODO
             }
             // And other methods in iterator.
             // And other methods in iterator.
             // And other methods in iterator.
+
+            const_iterator operator++(int) {
+                const_iterator ret = *this;
+                if (ptr == id->nil)throw invalid_iterator();
+                ptr = id->Sub(ptr->data.first);
+                return ret;
+            }
+
+            /**
+             * TODO ++iter
+             */
+            const_iterator &operator++() {
+                if (ptr == id->nil)throw invalid_iterator();
+                ptr = id->Sub(ptr->data.first);
+                return *this;
+            }
+
+            /**
+             * TODO iter--
+             */
+            const_iterator operator--(int) {
+                const_iterator ret = *this;
+                if (ptr == id->nil)ptr = id->Max(id->root);
+                else ptr = id->Pre(ptr->data.first);
+                if (ptr == id->nil)throw invalid_iterator();
+                return ret;
+            }
+
+            /**
+             * TODO --iter
+             */
+            const_iterator &operator--() {
+                if (ptr == id->nil)ptr = id->Max(id->root);
+                else ptr = id->Pre(ptr->data.first);
+                if (ptr == id->nil)throw invalid_iterator();
+                return *this;
+            }
+
+            /**
+             * a operator to check whether two iterators are same (pointing to the same memory).
+             */
+            const value_type &operator*() const {
+                if (ptr == id->nil)throw invalid_iterator();
+                return ptr->data;
+            }
+
+            bool operator==(const iterator &rhs) const {
+                return ptr == rhs.ptr;
+            }
+
+            bool operator==(const const_iterator &rhs) const {
+                return ptr == rhs.ptr;
+            }
+
+            /**
+             * some other operator for iterator.
+             */
+            bool operator!=(const iterator &rhs) const {
+                return ptr != rhs.ptr;
+            }
+
+            bool operator!=(const const_iterator &rhs) const {
+                return ptr != rhs.ptr;
+            }
+
+            /**
+             * for the support of it->first.
+             * See <http://kelvinh.github.io/blog/2013/11/20/overloading-of-member-access-operator-dash-greater-than-symbol-in-cpp/> for help.
+             */
+            const value_type *operator->() const noexcept {
+                if (ptr == id->nil)throw invalid_iterator();
+                return &(ptr->data);
+            }
         };
 
         /**
          * TODO two constructors
          */
-        map() : root(nullptr), _size(0) {}
+        map() : _size(0) {
+            // node may not have a default constructor
+            nil = (node *) malloc(sizeof(node));
+            nil->col = 1;
+            nil->ch[0] = nil->ch[1] = nil->fa = nil;
+            root = nil;
+        }
 
         map(const map &other) : _size(other._size) {
-            dfs_copy(root, other.root, nullptr);
+            // build the external node "nil" first
+            nil = (node *) malloc(sizeof(node));
+            nil->col = 1;
+            nil->ch[0] = nil->ch[1] = nil->fa = nil;
+            root = nil;
+            dfs_copy(root, other.root, nil);
         }
 
         /**
@@ -205,8 +402,9 @@
         map &operator=(const map &other) {
             if (this == &other)return *this;
             dfs_destroy(root);
+            // nil already exist !!!
             _size = other._size;
-            dfs_copy(root, other.root, nullptr);
+            dfs_copy(root, other.root, nil);
             return *this;
         }
 
@@ -216,6 +414,9 @@
         ~map() {
             _size = 0;
             dfs_destroy(root);
+            // remember delete the external node "nil"
+            delete nil;
+            nil = nullptr;
         }
 
         /**
@@ -226,13 +427,13 @@
          */
         T &at(const Key &key) {
             node *res = my_find(key);
-            if (res == nullptr)throw index_out_of_bound();
+            if (res == nil)throw index_out_of_bound();
             return res->data.second;
         }
 
         const T &at(const Key &key) const {
             node *res = my_find(key);
-            if (res == nullptr)throw index_out_of_bound();
+            if (res == nil)throw index_out_of_bound();
             return res->data.second;
         }
 
@@ -244,7 +445,7 @@
          */
         T &operator[](const Key &key) {
             node *res = my_find(key);
-            if (res == nullptr) {
+            if (res == nil) {
                 insert(pair<Key, T>(key, T()));
                 res = my_find(key);
             }
@@ -256,24 +457,32 @@
          */
         const T &operator[](const Key &key) const {
             node *res = my_find(key);
-            if (res == nullptr)throw index_out_of_bound();
+            if (res == nil)throw index_out_of_bound();
             return res->data.second;
         }
 
         /**
          * return a iterator to the beginning
          */
-        iterator begin() {}
+        iterator begin() {
+            return iterator(this, Min(root));
+        }
 
-        const_iterator cbegin() const {}
+        const_iterator cbegin() const {
+            return const_iterator(this, Min(root));
+        }
 
         /**
          * return a iterator to the end
          * in fact, it returns past-the-end.
          */
-        iterator end() {}
+        iterator end() {
+            return iterator(this, nil);
+        }
 
-        const_iterator cend() const {}
+        const_iterator cend() const {
+            return const_iterator(this, nil);
+        }
 
         /**
          * checks whether the container is empty
@@ -298,6 +507,32 @@
             dfs_destroy(root);
         }
 
+    private:
+
+        void insert_fixup(node *o) {
+            while (o->fa->col == 0) {// o or o's father could be the root
+                node *un = U(o), *f = o->fa, *pa = o->fa->fa;
+                if (un->col == 0) {
+                    f->col = un->col = 1;
+                    pa->col = 0;
+                    o = pa;
+                    continue;
+                }
+                if (rel(o) == rel(f)) {
+                    rotate(f);
+                    f->col = 1;
+                    o->col = pa->col = 0;
+                } else {
+                    rotate(o), rotate(o);
+                    o->col = 1;
+                    f->col = pa->col = 0;
+                }
+                break;
+            }
+            root->col = 1;
+        }
+
+    public:
         /**
          * insert an element.
          * return a pair, the first of the pair is
@@ -305,14 +540,79 @@
          *   the second one is true if insert successfully, or false.
          */
         pair<iterator, bool> insert(const value_type &value) {
+            node *o = root, *f = nil;
+            while (o != nil && o->data.first != value.first) {
+                f = o;
+                if (o->data.first < value.first)o = o->ch[0];
+                else o = o->ch[1];
+            }
+            if (o != nil)return std::make_pair(iterator(this, o), false);
+            o = new node(value);
+            o->col = 0;
+            o->fa = f, o->ch[0] = o->ch[1] = nil;
+            if (o->fa == nil) root = o;
+            else o->fa->ch[value.first > o->fa->data.first] = o;
+            insert_fixup(o);
+            return std::make_pair(iterator(this, o), true);
+        }
+
+    private:
+
+        void transplant(node *x, node *y) {
+            if (x->fa == nil)root = y;
+            else x->fa->ch[rel(x)] = y;
+            y->fa = x->fa;
+        }
+
+        void erase_fixup(node *o) {
+            while (o != root && o->col == 1) {
+                bool r = rel(o);
+                if (B(o)->col == 0) {
+                    rotate(B(o));
+                    swap(o->fa->col, o->fa->fa->col);
+                } else if (B(o)->ch[0]->col == 1 && B(o)->ch[1]->col == 1) {
+                    B(o)->col = 0;
+                    o = o->fa;
+                } else if (B(o)->ch[r]->col == 0 && B(o)->ch[r ^ 1]->col == 1) {
+                    node *son = B(o)->ch[r];
+                    rotate(son);
+                    swap(son->col, son->ch[r ^ 1]->col);
+                } else {
+                    rotate(B(o));
+                    swap(o->fa->col, o->fa->fa->col);
+                    o->fa->fa->ch[r ^ 1]->col = 1;
+                    break;
+                }
+            }
+            o->col = 1;
         }
 
+    public:
         /**
          * erase the element at pos.
          *
          * throw if pos pointed to a bad element (pos == this->end() || pos points an element out of this)
          */
-        void erase(iterator pos) {}
+        void erase(iterator pos) {
+            if (pos.id != this || pos.ptr == nil)throw invalid_iterator();
+            bool init_col;
+            node *o = pos.ptr, *o1;
+            if (o->ch[0] == nil)o1 = o->ch[1];
+            else if (o->ch[1] == nil)o1 = o->ch[0];
+            else {
+                node *suf = Min(o->ch[1]);
+                std::swap(o->data, suf->data);
+                o = suf;
+                o1 = suf->ch[1];
+            }
+            init_col = o->col;
+            transplant(o, o1);
+            delete o;
+
+            node *u = o1->fa;
+            while (u != nil)pushup(o), u = u->fa;
+            if (init_col == 1)erase_fixup(o1);
+        }
 
         /**
          * Returns the number of elements with key
@@ -321,7 +621,9 @@
          *     since this container does not allow duplicates.
          * The default method of check the equivalence is !(a < b || b > a)
          */
-        size_t count(const Key &key) const {}
+        size_t count(const Key &key) const {
+            return my_find(key) != nil;
+        }
 
         /**
          * Finds an element with key equivalent to key.
@@ -329,9 +631,13 @@
          * Iterator to an element with key equivalent to key.
          *   If no such element is found, past-the-end (see end()) iterator is returned.
          */
-        iterator find(const Key &key) {}
+        iterator find(const Key &key) {
+            return iterator(this, my_find(key));
+        }
 
-        const_iterator find(const Key &key) const {}
+        const_iterator find(const Key &key) const {
+            return const_iterator(this, my_find(key));
+        }
     };
 
 }
